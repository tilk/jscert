
========== JSNumber ===============

  In JSNumber, fix the following instance by finding the correct binding in Flocq:
    Global Instance number_comparable : Comparable number.


==========  ===============


Definition ref_put_value runs S C rv v : result_void :=
  match rv with
  | resvalue_value v => run_error S native_error_ref
  | resvalue_ref r =>
    ifb ref_is_unresolvable r then (
      if ref_strict r then
        run_error S native_error_ref
      else
        object_put runs S C prealloc_global (ref_name r) v throw_false)
    else
      match ref_base r with
      | ref_base_type_value (value_object l) =>
        object_put runs S C l (ref_name r) v (ref_strict r)
      | ref_base_type_value (value_prim w) =>
        ifb ref_kind_of r = ref_kind_primitive_base then
          prim_value_put runs S C w (ref_name r) v (ref_strict r)
        else
          impossible_with_heap_because S "[ref_put_value] found a primitive base whose kind is not a primitive!"
      | ref_base_type_env_loc L =>
        env_record_set_mutable_binding runs S C L (ref_name r) v (ref_strict r)
      end
  | resvalue_empty =>
    impossible_with_heap_because S "[ref_put_value] received an empty result."
  end.




========== Global object ===============

global heap:
   prealloc_global --> object_prealloc_global

object_prealloc_global
   .properties_:
      "Number" --> prealloc_number


========== Object Number ===============

global heap:
   prealloc_number --> object_prealloc_number

object_prealloc_number:
   .class_ := "Function"
   .proto_ := prealloc_function_proto
   .construct_ := (construct_prealloc prealloc_number)
   .properties_ :
      "NaN" --> JsNumber.nan
      "prototype" --> prealloc_number_proto


========== Class Number.prototype ===============

global heap:
   prealloc_number_proto --> object_prealloc_number_proto

object_prealloc_number_proto:
   .value_ := JsNumbe.zero
   .proto_ := prealloc_object_proto
   .class_ := "Number"
   .properties_ :=
      "toString" --> prealloc_number_proto_to_string
      "constructor" --> prealloc_number


========== Method toString from Number.prototype ===============

object_prealloc_number_proto.properties_:
   "toString" --> prealloc_number_proto_to_string

global heap:
   prealloc_number_proto_to_string --> number_proto_to_string_function_object

number_proto_to_string_function_object:
   .proto_ := prealloc_function_proto
   .class_ := "Function" 
   .properties_ := "length" --> (attrib_constant 0) 
   .call_:= Some (call_prealloc prealloc_number_proto_to_string)

red_spec_call_number_proto_to_string:
   ... -> red_expr S C (spec_call_prealloc prealloc_number_proto_to_string args) o


========== Constructor method of Number ===============

The "new Number(args)" syntax gives rise to "spec_construct".

  | red_spec_constructor : forall S C l B args o,
      object_method object_construct_ S l (Some B) ->
      red_expr S C (spec_construct_1 B l args) o ->
      red_expr S C (spec_construct l args) o

In the "construct_" field, we find a "construct_prealloc".

  | red_spec_construct_1_prealloc : forall S C B l args o,
      red_expr S C (spec_construct_prealloc B args) o -> 
      red_expr S C (spec_construct_1 (construct_prealloc B) l args) o   

The reductions rule for "spec_construct_prealloc prealloc_number" lead to:

   ...
   let O1 := object_new prealloc_number_proto "Number" in
   let O := object_with_primitive_value O1 v in 
   (l, S') = object_alloc S O ->
   red_expr S C (spec_construct_prealloc prealloc_number args) (out_ter S' l) 

The latter allocates a new object of class "Number" with prototype "prealloc_number_proto"


========== Calls to Number() without new ===============

If we write "Number()" without new, we get a call:

  | red_spec_call_1_prealloc : forall S C B lo this args o,
      red_expr S C (spec_call_prealloc B args) o -> 
      red_expr S C (spec_call_1 (call_prealloc B) lo this args) o
 
In the "call_" field, we find a "construct_prealloc".

  | red_spec_call_1_prealloc : forall S C B lo this args o,
      red_expr S C (spec_call_prealloc B args) o -> 
      red_expr S C (spec_call_1 (call_prealloc B) lo this args) o

The reductions rule for "spec_call_prealloc prealloc_number" lead to:

  | red_spec_call_number_nil : forall S C, 
      red_expr S C (spec_call_prealloc prealloc_number nil) (out_ter S JsNumber.zero) 

  | red_spec_call_number_not_nil : forall S C v o args,
      args <> nil ->
      arguments_from args (v::nil) ->
      red_expr S C (spec_to_number v) o ->
      red_expr S C (spec_call_prealloc prealloc_number args) o 

The latter rules directly return a value, without allocating an object.





---------
---------
---------
---------
---------
---------
---------
---------


x = { a: 1 }
y = { b: 2 }
y.__proto___ = x
z = { c: 3 }
z.__proto___ = y

(function demo()) {
	count = 0
	for (k in z) {
		if (count++ == 0)
			z.___proto___ = x
		if (k == "a")
			return 1
	}
	return 0 })()
   
---------
 
   TODO: we need to check whether the rules handle correctly the
  behaviors with an empty res_value. (they should use rv instead of v to propagate)

---------

(* SameValue: TODO: problem of the several representations of NaN *)

(* File JsPreliminary: Martin: move what you don't use in the interpreter
   from section "Factorization of rules for binary operators"
   into JsPrettyInterm. *)

TODO: discuter de :
   Axiom parse_pickable : forall s, Pickable (parse s).

TODO: discuter des boucles

TODO: remove preallocated errors 

Le makefile ne fait pas  
   mkdir -p interp/src/extract
du coup error sur coqdep 


TODO: abort_intercepted check whether we need to add this:

comprend pas:
      (* [stat_try_3] is marked as intercepting [abort] rules in [abort_intercepted_stat]:  does that mean that there actually is a way not to execute the [finally] part of a [try/catch/finally] while actually executing a part of the [try] block?  -- Martin. *)

attributes_writable (* TODO: check:  Even if it's used in the semantics, is that wanted? -- Martin *)


  (** ** Conversions (9) *)
  (* TODO:  spec_to_primitive_auto *)
  (* TODO:  spec_prim_new_object *)


=======
=======
=======


ARTHUR:
* Changed semantics of loop to better match paper
* 12.6.2 seems boggus: if continue, then even if not good label, will loop




=======
TODO


(** ---TODO :  Entering eval code (10.4.2) *)    

*) Inductive funccode => deprecated?

*) resolve ambiguity "propname" vs "prop_name"


===
ONCE INTERPRETER IS STABILIZED

*) Factorization of rules for binary operators : move a bunch of these defs into js_pretty_inter 


=====
LESS URGENT

*) stat_vardecl : stat_for_in_var 

*) factorize syntax of for_in and for_in_var 

*) Find an order for sections in JsPreliminary

*) TODO: store the fresh locations into a wrapper around LibHeap

*) we would be closer to the spec in red_stat_try_1_catch_throw
   if lexical environments were not lists, but instead objects with a parent field,
   however this would come at the cost of having a predicate to enforce acyclicity

*) a generic rule for obtaining arguments

=====
INVARIANT ON SYNTAX

- "try" must have either catch or finally
- "with" statement cannot be in strict mode

-- a result triple, if is of type throw, carries a real value (not empty nor reference)



=====
INVARIANT ON WF

  | red_expr_delete_1_ref_unresolvable : forall S0 S C r o,
      ref_is_unresolvable r ->
      red_expr S C (spec_error_or_cst (ref_strict r) builtin_syntax_error true) o -> 
      red_expr S0 C (expr_delete_1 (out_ter S (ret_ref r))) o

  | red_expr_delete_3_strict : forall S C r L o,
      red_expr S C (spec_error builtin_syntax_error) o -> 
      red_expr S C (expr_delete_3 r L true) o 

  | red_expr_prepost_1_invalid : forall S0 S C op R,
      ~ valid_lhs_for_assign R ->
      red_expr S0 C (expr_prepost_1 op (out_ter S R)) (out_syntax_error S)

  | red_expr_prepost_1_valid : forall S0 S C R op o1 o,
      valid_lhs_for_assign R ->

=====
BUG:

x: { try { throw 1 } catch (e) { break x } finally { 2 } }
2
x: { try { throw 1 } catch (e) { break x } finally { } }
undefined
x: { try { throw 1 } catch (e) { 3; break x } finally { } }
3

function f() {x: { try { throw 1 } catch (e) { return 3 } finally { 2 } } }; f()
3
function f() {x: { try { throw 1 } catch (e) { return 3 } finally { return 2 } } }; f()
2
function f() {x: { try { throw 1 } catch (e) { return 3 } finally { break x } }; return 2 }; f()
2

function f() {  try { return 1 } finally { return 2 } }; f()
2
function f() {  x : { try { return 1 } finally { break x } }; return 4 }; f()
4
function f() {  x : { try { return 1 } finally {  } }; return 4 }; f()
1
function f() {  x : { try { break x } finally { 2 } }; return 4 }; f()
4
function f() {  x : { try { break x } finally { 2 } ; return 3 }; return 4 }; f()
4
function f() {  y: { x : { try { break x } catch (e) { break y } finally { 2 } ; return 3 }; return 4 } ; return 5 }; f()
4

=====
TEST:

delete {}




(** [valid_lhs_for_assign R] asserts that [R] will not satisfy
    the condition under which a SyntaxError gets triggered
    (see the semantics of simple assignement in the spec).
    LATER: will be used if we do not rely on parser for raising
    the SyntaxError. *)

Open Scope string_scope. (* TODO: move to top of the file *)

(* LATER: only for syntax errors
Definition valid_lhs_for_assign R :=
  ~ (exists r,
         R = ret_ref r
      /\ ref_strict r = true
      /\ ref_kind_of r = ref_kind_env_record
      /\ let s := ref_name r in
         (s = "eval" \/ s = "arguments")).
*)




(**************************************************************)
(** ** Read and updates on descriptors *)

(** Assumes fully-populated in the sense of 

Definition descriptor_is_writable Desc :=
  match Ad with descriptor_intro ov ow og os oe oc =>
                descriptor_intro ov (Some false) og os oe oc end.

Definition descriptor_is_configurable Desc :=
  match Ad with descriptor_intro ov ow og os oe oc =>
                descriptor_intro ov (Some false) og os oe oc end.


Definition descriptor_with_writable_false Desc :=
  match Ad with descriptor_intro ov ow og os oe oc =>
                descriptor_intro ov (Some false) og os oe oc end.

Definition descriptor_with_configurable_false Desc :=
  match Ad with descriptor_intro ov ow og os oe oc =>
                descriptor_intro ov ow og os oe (Some false) end.























(*******************************************************************************)
(*******************************************************************************)
(***************************** LATER *******************************************)
(*******************************************************************************)

(*----LATER: (arthur)

  (* 15.7.4.2: Number.prototype.toString([radix]) *)

  (* Daniele: I guess we don't have the algorithm for representing numbers 
     as strings with different radix. I'll just ignore this (i.e. always do
     toString in base 10) *)

  (* Daniele: I'm not convinced by this one :/ *)
  
  (* if [this] is not a number then throw Type Error exception *)
  | red_spec_call_number_proto_to_string_not_number : forall S C s b o v args, 
      v = execution_ctx_this_binding C ->
      not (type_of v = type_number) -> (* Daniele: check last lines of [15.7.4.2]. *)
      red_expr S C (spec_error native_error_type) o ->
      red_expr S C (spec_call_prealloc prealloc_number_proto_to_string args) o

  (* if [this] is a number we proceed to the next stages *)
  | red_spec_call_number_proto_to_string_number : forall S C s b o v args, 
      v = execution_ctx_this_binding C ->
      type_of v = type_number -> 
      red_expr S C (spec_call_number_proto_to_string_1 v args) o ->
      red_expr S C (spec_call_prealloc prealloc_number_proto_to_string args) o

  (* The [radix] parameter is not there: use 10 as default *)
  | red_spec_call_number_proto_to_string_number_1_no_radix : forall S C v o args, 
      args = nil ->
      red_expr S C (spec_call_prealloc prealloc_number_proto_to_string (value_prim (prim_number (JsNumber.of_int 10))::args)) o -> 
      red_expr S C (spec_call_number_proto_to_string_1 v args) o 

  (* The [radix] parameter is undefined: use 10 as default *)
  | red_spec_call_number_proto_to_string_number_1_undef_radix : forall S C v vr args o, 
      arguments_from args (vr::nil) ->
      vr = undef ->
      red_expr S C (spec_call_prealloc prealloc_number_proto_to_string (value_prim (prim_number (JsNumber.of_int 10))::args)) o -> 
      red_expr S C (spec_call_number_proto_to_string_1 v args) o 

  (*  factorize the previous 2? *)

  (* The [radix] is present *)
  | red_spec_call_number_proto_to_string_number_1_radix : forall S C v vr args o o1,
      arguments_from args (vr::nil) ->
      not (vr = undef) ->
      red_expr S C (spec_to_integer vr) o1 ->
      red_expr S C (spec_call_number_proto_to_string_2 v o1) o -> 
      red_expr S C (spec_call_number_proto_to_string_1 v args) o 
 
  (* If the [radix] is 10 we do a simple toString *)
  | red_spec_call_number_proto_to_string_2_radix_10 :forall S S' C v vr o,
      vr = value_prim (prim_number (JsNumber.of_int 10)) -> 
      red_expr S C (spec_to_string v) o ->
      red_expr S C (spec_call_number_proto_to_string_2 v (out_ter S' vr)) o
      
  (* If the [radix] is out of range we throw a Range Error exception *)
  | red_spec_call_number_proto_to_string_2_radix_out_of_range : forall S S' C v vr k o,
      vr = value_prim (prim_number (JsNumber.of_int k)) ->
      (k < 2 /\ k > 36) -> 
      red_expr S C (spec_error native_error_type) o -> (* Should be Range Error instead of Type Error *)
      red_expr S C (spec_call_number_proto_to_string_2 v (out_ter S' vr)) o
  
  (* If the [radix] is in range we do a simple toString 
     TODO: in fact the number should be printed using that radix
     implementation dependent) *)
  | red_spec_call_number_proto_to_string_2_radix_in_range : forall S S' C v vr k o,
      vr = value_prim (prim_number (JsNumber.of_int k)) ->
      not (k < 2 /\ k > 36) -> 
      red_expr S C (spec_to_string v) o -> (* This should be something different *)
      red_expr S C (spec_call_number_proto_to_string_2 v (out_ter S' vr)) o



  (** Throw Type Error Function Object Initialisation *)           
  
  (* Could we have this not a a reduction, but as simple function in JsInit? *)
  | red_spec_error_type_error : forall O O1 code O2 S' A o1 S C o,
      O = object_new prealloc_function_proto "Function" ->
      O1 = object_with_invokation O None (Some prealloc_spec_call_default) None ->
      (* TODO : Is this ok? TODO: make it compile*)
      (* code = funcbody_intro (prog_stat (stat_throw (expr_new (expr_identifier "TypeError") nil))) "throw TypeError()" -> 
      *)
      O2 = object_with_details O1 (Some (env_loc_global_env_record::nil)) (Some nil) (Some code) None None None None ->
      S' = object_write S prealloc_throw_type_error O2 ->
      A = attributes_data_intro JsNumber.zero false false false ->
      red_expr S' C (spec_object_define_own_prop prealloc_throw_type_error "length" A false) o1 ->
      red_expr S C (spec_error native_error_type_1 o1) o ->
      red_expr S C (spec_error native_error_type) o
  
  | red_spec_error_type_error_1 : forall O S' S0 S C v o,
      object_binds S prealloc_throw_type_error O ->
      S' = object_write S prealloc_throw_type_error (object_set_extensible O false) ->
      red_expr S0 C (spec_error native_error_type_1 (out_ter S v)) (out_ter_void S')



------*)


(**------ begin under dvpt -------- 

(* --which version to keep ??

  (** For-in statement *)

  | red_stat_for_in_2_null_or_undef : forall S0 S C e1 t v1 o,
      v1 = null \/ v1 = undef ->
      (* todo: replace premise with   [is_null_or_undef v1] *)
      red_stat S0 C (stat_for_in_2 e1 t (out_ter S v1)) (out_ter S undef)
      
  | red_stat_for_in_2_else : forall o1 S0 S C e1 t v1 o,
      v1 <> null /\ v1 <> undef ->
      (* todo: replace premise with  [~ is_null_or_undef v1] *)
      red_expr S C (spec_to_object v1) o1 ->
      red_stat S C (stat_for_in_3 e1 t o1) o ->
      red_stat S0 C (stat_for_in_2 e1 t (out_ter S v1)) o  
      
      (* todo: rename rules below *)

      (* todo: use notations : 
        Open Scope set_scope.
        x \in E   \{}  \{x}  E \u F    E = F \u \{x}   *)

*)

  (** For-in statement *)

  | red_stat_for_in : forall o1 S0 S C e1 e2 t o,
      red_expr S C (spec_expr_get_value e2) o1 ->
      red_stat S C (stat_for_in_2 e1 t o1) o ->
      red_stat S0 C (stat_for_in e1 e2 t) o

  | red_stat_for_in_3_null_undef : forall S0 S C e1 t v1 o,
      v1 = null \/ v1 = undef ->
      red_stat S0 C (stat_for_in_2 e1 t (out_ter S v1)) (out_ter S ret_or_empty_empty)

  | red_stat_for_in_4 : forall o1 S0 S C e1 t exprValue o,
      exprValue <> null /\ exprValue <> undef ->
      red_expr S C (spec_to_object exprValue) o1 ->
      red_stat S C (stat_for_in_3 e1 t o1) o ->
      red_stat S0 C (stat_for_in_2 e1 t (out_ter S exprValue)) o

  | red_stat_for_in_6a_start : forall S0 S C e1 t l initProps o,
      object_all_enumerable_properties S (value_object l) initProps ->
      red_stat S C (stat_for_in_4 e1 t l None None initProps (@empty_impl prop_name)) o ->
      red_stat S0 C (stat_for_in_3 e1 t (out_ter S l)) o

  | red_stat_for_in_6a_done : forall S C e1 t l vret lhsRef initProps visitedProps currentProps,
      object_all_enumerable_properties S (value_object l) currentProps ->
      incl_impl currentProps visitedProps ->
      red_stat S C (stat_for_in_4 e1 t l (Some vret) lhsRef initProps visitedProps) (out_ter S vret)

  (* allow possibility to skip new added property in for-in loop *)
  | red_stat_for_in_6a_skip_added_property : forall S C e1 t l vret lhsRef initProps visitedProps currentProps x o,
      object_all_enumerable_properties S (value_object l) currentProps ->
      x \in (remove_impl (remove_impl currentProps visitedProps) initProps) ->
      let newVisitedProps := union_impl (single_impl x) visitedProps in
      red_stat S C (stat_for_in_4 e1 t l vret lhsRef initProps newVisitedProps) o ->
      red_stat S C (stat_for_in_4 e1 t l vret lhsRef initProps visitedProps) o

  | red_stat_for_in_6a_select_x : forall S C e1 t l vret lhsRef initProps visitedProps currentProps x o,
      object_all_enumerable_properties S (value_object l) currentProps ->
      in_impl x (remove_impl currentProps visitedProps) ->
      let newVisitedProps := union_impl (single_impl x) visitedProps in
      red_stat S C (stat_for_in_5 e1 t l vret lhsRef initProps newVisitedProps x) o ->
      red_stat S C (stat_for_in_4 e1 t l vret lhsRef initProps visitedProps) o

  (* evaluate new lhdRef *)
  | red_stat_for_in_6b_evaluate : forall S C e1 t l vret lhdRef initProps visitedProps x o1 o,
      red_expr S C e1 o1 ->
      red_stat S C (stat_for_in_6 e1 t l vret (Some o1) initProps visitedProps x) o ->
      red_stat S C (stat_for_in_5 e1 t l vret lhdRef initProps visitedProps x) o

  (* reuse earlier lhdRef *)
  | red_stat_for_in_6b_reuse_old : forall S C e1 t l vret lhdRef initProps visitedProps x o,
      red_stat S C (stat_for_in_6 e1 t l vret (Some lhdRef) initProps visitedProps x) o ->
      red_stat S C (stat_for_in_5 e1 t l vret (Some lhdRef) initProps visitedProps x) o

  | red_stat_for_in_6c : forall S0 S C e1 t l vret lhdRef initProps visitedProps x o1 o,
      red_expr S C (spec_put_value lhdRef x) o1 ->
      red_stat S C (stat_for_in_7 e1 t l vret (Some (out_ter S lhdRef)) initProps visitedProps o1) o ->
      red_stat S0 C (stat_for_in_6 e1 t l vret (Some (out_ter S lhdRef)) initProps visitedProps x) o

  | red_stat_for_in_6d : forall S0 S C e1 t l vret lhdRef initProps visitedProps o1 o,
      red_stat S C t o1 ->
      red_stat S C (stat_for_in_8 e1 t l vret lhdRef initProps visitedProps o1) o ->
      red_stat S0 C (stat_for_in_7 e1 t l vret lhdRef initProps visitedProps (out_ter_void S)) o


(*-- todo: make compile following introduction of ret_or_empty (see JsSyntax) 

  | red_stat_for_in_6e : forall S0 S C e1 t l vret lhdRef initProps visitedProps res o,
      let vnew := match res with
        | res_normal R => Some R
        | _ => vret end
      in
      red_stat S C (stat_for_in_9 e1 t l vnew lhdRef initProps visitedProps res) o ->
      red_stat S0 C (stat_for_in_8 e1 t l vret lhdRef initProps visitedProps (out_ter S res)) o

  | red_stat_for_in_6f_break : forall S C e1 t l vret lhdRef initProps visitedProps label,
      (* TODO: check break label is in current label set *)
      red_stat S C (stat_for_in_9 e1 t l (Some vret) lhdRef initProps visitedProps (res_break label)) (out_ter S vret)

  | red_stat_for_in_6g_exit : forall S C e1 t l vret lhdRef initProps visitedProps res,
      (* TODO: check continue label is in current label set *)
      (* TODO: use instead the res_type projection *)
      ~ (is_res_break res) /\ ~ (is_res_continue res) /\ ~ (is_res_normal res) ->

      red_stat S C (stat_for_in_9 e1 t l vret lhdRef initProps visitedProps res) (out_ter S res)

  | red_stat_for_in_6g_continue : forall o1 S C e1 t l vret lhdRef initProps visitedProps res o,
     (* TODO: check continue label is in current label set *)
      ~ (is_res_break res) /\ ((is_res_continue res) \/ (is_res_normal res)) ->
      red_stat S C (stat_for_in_4 e1 t l vret lhdRef initProps visitedProps) o ->
      red_stat S C (stat_for_in_9 e1 t l vret lhdRef initProps visitedProps res) o  

-- end todo *) 

------ end under dvpt --------**)

(*  | object_get_own_property_string : forall S l x An An',
      object_class S l "String" ->
      object_get_own_property_default S l x An ->
      (If An <> full_descriptor_undef
       then An' = An
       else 
         (If (prim_string x <> convert_prim_to_string (prim_number (JsNumber.absolute (convert_primitive_to_integer x)))) (* TODO: remove coercion *)
          then An' = full_descriptor_undef
          else (* TODO: make an auxiliary definition for this else branch *)
            (exists s, exists (i:int),
                 object_prim_value S l (prim_string s)
              /\ JsNumber.of_int i = convert_primitive_to_integer x
              /\ let len : int := String.length s in
                 If (len <= i)
                 then An' = full_descriptor_undef
                 else (let s' := string_sub s i 1 in
                       An' = attributes_data_intro s' false true false)
          )
      )) ->
      object_get_own_property S l x An'.
*)





Definition convert_twice T T0
    (ifv : resultof T0 -> (state -> T -> specres (T * T)) -> specres (T * T))
    (KC : state -> value -> resultof T0) S v1 v2 : specres (T * T) :=
  ifv (KC S v1) (fun S1 vc1 =>
    ifv (KC S1 v2) (fun S2 vc2 =>
      res_spec S2 (vc1, vc2))).

Definition convert_twice' T
    (ifv : result -> (state -> T -> specres (T * T)) -> specres (T * T))
    (KC : state -> value -> result) S v1 v2
    (K : state -> T -> T -> result) : result :=
  (* As [convert_twice] uses [specres] and that we don't have time to convert
    all intermediate functions, this function is there to backport the new
    [convert_twice] with the old [if_*]. *)
  if_spec (convert_twice ifv KC S v1 v2) (fun S' (p : T * T) =>
    let '(p1, p2) := p in K S' p1 p2).

Definition convert_twice_primitive :=
    convert_twice' (@if_prim (prim * prim)) conv_primitive in

    Definition to_stuff_correct F E := forall runs S C v o,
  runs_type_correct runs ->
  F runs S C v = o :> result -> 
  red_expr S C (E v) o.

    Let unpair := fun (A B : Type) (K:state->A->A->B) =>
    (fun S (p:A*A) => let '(x1,x2) := p in K S x1 x2) in


